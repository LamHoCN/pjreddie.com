[{"pk": 1, "model": "core.image", "fields": {"image": "image/3Gf3Nc3o45Na5I25Jdcc4b6fa281817b817db.jpeg", "name": "Room"}}, {"pk": 2, "model": "core.image", "fields": {"image": "image/scene_1.png", "name": "Scenegraph"}}, {"pk": 3, "model": "core.image", "fields": {"image": "image/game0.jpg", "name": "game0"}}, {"pk": 4, "model": "core.image", "fields": {"image": "image/game1.jpg", "name": "game1"}}, {"pk": 5, "model": "core.image", "fields": {"image": "image/game2.jpg", "name": "game2"}}, {"pk": 8, "model": "core.image", "fields": {"image": "image/shapes.jpg", "name": "ray_shapes"}}, {"pk": 6, "model": "core.image", "fields": {"image": "image/progress_1.png", "name": "ray_shading"}}, {"pk": 7, "model": "core.image", "fields": {"image": "image/progress_final.jpg", "name": "ray_transmission"}}, {"pk": 9, "model": "core.image", "fields": {"image": "image/fractal.jpg", "name": "ray_fractal"}}, {"pk": 10, "model": "core.image", "fields": {"image": "image/Screen_shot_2011-01-27_at_5.03.51_PM.png", "name": "city_voronoi"}}, {"pk": 12, "model": "core.image", "fields": {"image": "image/Screen_shot_2011-01-27_at_5.15.14_PM.png", "name": "city_blocks"}}, {"pk": 13, "model": "core.image", "fields": {"image": "image/Screen_shot_2011-01-27_at_10.16.26_PM.png", "name": "city_final"}}, {"pk": 14, "model": "core.image", "fields": {"image": "image/Screen_shot_2011-01-27_at_5.19.50_PM.png", "name": "city_buildings"}}, {"pk": 15, "model": "core.image", "fields": {"image": "image/box.png", "name": "nehe_box"}}, {"pk": 16, "model": "core.image", "fields": {"image": "image/stars.png", "name": "nehe_stars"}}, {"pk": 1, "model": "core.file", "fields": {"upload": "files/Redmon_Thesis.pdf"}}, {"pk": 1, "model": "core.project", "fields": {"body": "During January my senior year, two friends and I undertook an independent project to create a 3D game in Java. This is what we came up with...\r\n\r\n##interactive terrain##\r\n![game1][]\r\n\r\n##resources management, construction##\r\n![game0][]\r\n\r\n##ai pathfinding, targeting, collision detection##\r\n![game2][]", "kind": "S", "end": null, "description": "I worked on a team of three students to design and implement a 3D game in Java. We implemented dynamic, obstacle-based pathfinding, interactive terrain, 3D animation and more.", "title": "Game Development in Java", "start": "2012-01-01", "images": [3, 4, 5]}}, {"pk": 2, "model": "core.project", "fields": {"body": "For my thesis in computer science, I researched ray tracing, its mathematical underpinnings and modern usage. I also implemented a ray tracer in C++ that supports...\r\n\r\n##Ambient lighting, diffuse and specular reflection##\r\n![ray_shading][]\r\n\r\n##Transmission through clear surfaces##\r\n![ray_transmission][]\r\n\r\n##Numerous shapes including 3D quadrics##\r\n![ray_shapes][]\r\n\r\n##Complex scenes##\r\n![ray_fractal][]\r\n\r\nYou can find the full text of my thesis [here](/media/files/Redmon_Thesis.pdf). You can also check out the code from my thesis on my [github](https://github.com/pjreddie/RayTracer).", "kind": "S", "end": "2011-05-01", "description": "I researched ray tracing, its mathematical underpinnings and modern usage. I implemented a ray tracer in C++ that supported specular reflection, diffuse reflection, and transmission; general spectral distributions for light sources and reflectance curves for surfaces; and numerous shapes including triangles and general three dimensional quadric surfaces.", "title": "Senior Thesis: Ray Tracing", "start": "2011-02-01", "images": [8, 6, 7, 9]}}, {"pk": 3, "model": "core.project", "fields": {"body": "We developed an application for procedurally generating the commercial districts of cities.\r\n\r\n![city_voronoi][]\r\nWe use Voronoi diagrams with randomly placed control points to generate the main roads and city districts.\r\n\r\n![city_blocks][]\r\nThese districts are further subdivided using regularly spaced control points to create city blocks and lots. \r\n\r\n![city_buildings][]\r\nWe generate buildings with a number of randomized parameters including building height, size, window width, height and density. We control average building height with a two dimensional Gaussian function that produces buildings with higher heights in specified downtown regions.\r\n\r\n![city_final][]\r\nFinally, pre-generated city elements like stop signs and stoplights are added. Our application produces fully explorable cities using OpenGL with realistic layouts and buildings.", "kind": "S", "end": null, "description": "I worked with fellow CS major Alex Bullard to develop a program to procedurally generate cities. We researched various topics in computational geometry and computer graphics to make generated cities realistic and interesting.", "title": "Procedural City Generation", "start": "2011-01-01", "images": [10, 12, 13, 14]}}, {"pk": 4, "model": "core.project", "fields": {"body": "NeHe has some pretty awesome tutorials for learning OpenGL. The original code is all in Visual C++ using native Windows windowing. This is my port of that code to C using GLFW for windowing.\r\n\r\n##Setup\r\n\r\nThis project is hosted on [GitHub!](https://github.com/pjreddie/NeHe-Tutorials-Using-GLFW)\r\n\r\nTo get this running you will need to install the [Simple OpenGL Image Library](http://www.lonesock.net/soil.html), [GLFW](http://www.glfw.org/).\r\n\r\nTo install SOIL you will probably have to modify the given Makefile included in `projects/makefile`. On OS X I had to modify the `CXX` line to read:\r\n\r\n    CXX = gcc -arch i386 -arch x86_64\r\n\r\nOnce you have the dependancies involved you can clone the git repository:\r\n\r\n    git clone https://github.com/pjreddie/NeHe-Tutorials-Using-GLFW.git\r\n\r\nThen you are ready to go!\r\n\r\n##Usage\r\n\r\nEach individual tutorial is in its own file. There is a Makefile in the top-level directory that should compile everything just by using `make` (it is written for OS X but you should be able to change the libraries to get it to work on your system).\r\n\r\nThe finished binaries can be run from the tutorial's folder or from the top-level folder since a data directory exists in both places (files in the code are opened with relative pathing). When you try it out you should see something like this:\r\n\r\n    $ make\r\n        cc -Wall  -lglfw ... tutorial_1/tutorial_1.c -o tutorial_1/run\r\n\r\n            ... [A few more lines of this] ...\r\n\r\n        cc -Wall  -lglfw ... tutorial_10/tutorial_10.c -o tutorial_10/run\r\n\r\n    $ tutorial_10/run\r\n        [Window opens with OpenGL Stuff, Huray!]\r\n    \r\nThere are some differences in my code vs. NeHe's original code so this is really just meant as a refenece as opposed to a direct port. I was having trouble locating any sample code for doing NeHe's tutorials using GLFW so once I got it working I decided to post what I had so others could use it as well. I hope you find it useful!\r\n\r\n##Examples\r\n![nehe_box][]\r\nOMG that's a box!\r\n\r\n![nehe_stars][]", "kind": null, "end": null, "description": "NeHe has some of the best tutorials out there for OpenGL. However, all of his original code is in Visual C++ using native Windows window management. I've been playing around with GLFW to do window management and set up the OpenGL context and I wasn't able to find any examples of the NeHe tutorials using GLFW so once I got mine working I decided to post it in case anyone else finds it useful. Enjoy!", "title": "NeHe Tutorials Using GLFW", "start": null, "images": [15, 16]}}]